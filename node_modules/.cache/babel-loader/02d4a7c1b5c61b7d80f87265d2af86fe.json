{"ast":null,"code":"var _jsxFileName = \"/home/aniketbhavsar/React Image-upload/src/components/ImageUpload.js\";\nimport React, { Component } from 'react';\nimport ImageCrop from './ImageCrop';\nimport { storage } from '../firebase';\n\nclass ImageUpload extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setEditorRef = editor => this.setState({\n      editor\n    });\n\n    this.onCrop = () => {\n      if (this.state.selectedImage !== undefined) {\n        const {\n          editor\n        } = this.state;\n\n        if (editor != null) {\n          const url = editor.getImageScaledToCanvas().toDataURL();\n          let imageNumber = Math.floor(Math.random() * 100);\n          let imageName = `image -${imageNumber}`;\n          let image = this.DataURLtoFile(url, imageName);\n          const uploadTask = storage.ref(`images/${image.name}`).put(image);\n          this.fileInput.value = \"\";\n          uploadTask.on('state_changed', snapshot => {\n            //progress\n            const progress = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n            this.setState({\n              progress\n            });\n          }, error => {\n            console.log(error);\n          }, () => {\n            storage.ref('images').child(image.name).getDownloadURL().then(url => {\n              alert(\"Image Uploaded Sucessfully\");\n            });\n          });\n        }\n      } else {\n        alert(\"Please choose Image\");\n      }\n    };\n\n    this.onScaleChange = scaleChangeEvent => {\n      const scaleValue = parseFloat(scaleChangeEvent.target.value);\n      this.setState({\n        scaleValue\n      });\n    };\n\n    this.DataURLtoFile = (dataurl, filename) => {\n      let arr = dataurl.split(','),\n          mime = arr[0].match(/:(.*?);/)[1],\n          bstr = atob(arr[1]),\n          n = bstr.length,\n          u8arr = new Uint8Array(n);\n\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n      }\n\n      return new File([u8arr], filename, {\n        type: mime\n      });\n    };\n\n    this.picChange = fileChangeEvent => {\n      const file = fileChangeEvent.target.files[0];\n      const {\n        type\n      } = file;\n\n      if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {} else {\n        this.setState({\n          openCropper: true,\n          selectedImage: fileChangeEvent.target.files[0],\n          fileUploadErrors: []\n        });\n      }\n    };\n\n    this.state = {\n      uploadPic: '',\n      editor: null,\n      scaleValue: 1,\n      progress: 0\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      name: \"profilePicBtn\",\n      accept: \"image/png, image/jpeg\",\n      onChange: this.picChange,\n      ref: ref => this.fileInput = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(ImageCrop, {\n      imageSrc: this.state.selectedImage,\n      setEditorRef: this.setEditorRef,\n      onCrop: this.onCrop,\n      scaleValue: this.state.scaleValue,\n      onScaleChange: this.onScaleChange,\n      valueProgress: this.state.progress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }\n    }));\n  }\n\n}\n\nexport default ImageUpload;","map":{"version":3,"sources":["/home/aniketbhavsar/React Image-upload/src/components/ImageUpload.js"],"names":["React","Component","ImageCrop","storage","ImageUpload","constructor","props","setEditorRef","editor","setState","onCrop","state","selectedImage","undefined","url","getImageScaledToCanvas","toDataURL","imageNumber","Math","floor","random","imageName","image","DataURLtoFile","uploadTask","ref","name","put","fileInput","value","on","snapshot","progress","round","bytesTransferred","totalBytes","error","console","log","child","getDownloadURL","then","alert","onScaleChange","scaleChangeEvent","scaleValue","parseFloat","target","dataurl","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","picChange","fileChangeEvent","file","files","endsWith","openCropper","fileUploadErrors","uploadPic","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ImageCrop from './ImageCrop';\nimport { storage } from '../firebase';\n\nclass ImageUpload extends Component {\n      constructor(props) {\n            super(props);\n            this.state = {\n                  uploadPic: '',\n                  editor: null,\n                  scaleValue: 1,\n                  progress:0,\n            };\n           \n      }\n\n      setEditorRef = (editor) => this.setState({ editor });\n      // image upload to firestore database\n      onCrop = () => {\n            if(this.state.selectedImage !== undefined ){\n            const { editor } = this.state;\n            if (editor != null) {\n                  const url = editor.getImageScaledToCanvas().toDataURL();\n                  let imageNumber = Math.floor(Math.random() * 100);\n                  let imageName = `image -${imageNumber}`;\n                  let image = this.DataURLtoFile(url, imageName);\n                  const uploadTask = storage.ref(`images/${image.name}`).put(image);\n                  this.fileInput.value = \"\";\n                  uploadTask.on('state_changed',\n                        (snapshot) => {\n                              //progress\n                              const progress = Math.round((snapshot.bytesTransferred / snapshot .totalBytes) * 100);\n                              this.setState({progress})\n                        }\n                        , (error) => {\n                              console.log(error);\n                        }, () => {storage.ref('images').child(image.name).getDownloadURL().then(url => {\n                              alert(\"Image Uploaded Sucessfully\");\n                        })\n                              \n                        \n                  });\n                       \n            }\n      }else{\n                  alert(\"Please choose Image\");\n            }\n      };\n\n      onScaleChange = (scaleChangeEvent) => {\n            const scaleValue = parseFloat(scaleChangeEvent.target.value);\n            this.setState({ scaleValue });\n      };\n//convert base64 URL into image\n      DataURLtoFile = (dataurl, filename) => {\n            let arr = dataurl.split(','),\n                  mime = arr[0].match(/:(.*?);/)[1],\n                  bstr = atob(arr[1]),\n                  n = bstr.length,\n                  u8arr = new Uint8Array(n);\n            while (n--) {\n                  u8arr[n] = bstr.charCodeAt(n);\n            }\n            return new File([u8arr], filename, { type: mime });\n      };\n\n      //Check image type and setState\n      picChange = (fileChangeEvent) => {\n            const file = fileChangeEvent.target.files[0];\n            const { type } = file;\n            if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\n            } else {\n                  this.setState({ openCropper: true, selectedImage: fileChangeEvent.target.files[0], fileUploadErrors: [] });\n            }\n      };\n      render() {\n            return (\n                  <div className=\"App\">\n                       \n                        <input type=\"file\" name=\"profilePicBtn\" accept=\"image/png, image/jpeg\" onChange={this.picChange}\n                        ref={ref=> this.fileInput = ref}\n                         />\n                        <ImageCrop\n                              imageSrc={this.state.selectedImage}\n                              setEditorRef={this.setEditorRef}\n                              onCrop={this.onCrop}\n                              scaleValue={this.state.scaleValue}\n                              onScaleChange={this.onScaleChange}\n                              valueProgress = {this.state.progress}\n                        />\n                  </div>\n\n            );\n      }\n}\n\nexport default ImageUpload;\n"]},"metadata":{},"sourceType":"module"}